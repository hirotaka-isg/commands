console.log("Hello World");
文の最後は[;]で終わる。

// コメントアウト

■文字の連結
console.log("にんじゃ" + "わんこ");

■変数の定義
let 変数 = 値
let name = "john";

■変数の特徴
let name = "鈴木";
console.log(name + "さん")
→鈴木さん

let number = 11;
console.log(number + 5);
→16

■変数の命名ルール
number 英単語を用いる
oddNumber 2語以上の場合は大文字で区切る

■変数自身の更新
基本系→省略系
x = x + 10 → x += 10
x = x - 10 → x -= 10
x = x * 10 → x *= 10
x = x / 10 → x /= 10
x = x % 10 → x %= 10

■定数
定数は値を更新することができない。
const 定数名 = 値;

■テンプレートリテラル
「テンプレートリテラル」という連結方法があります。
テンプレートリテラルを用いると、文字列の中に定数（変数）を埋め込むことができます。

const name = "にんじゃわんこ";
console.log(`こんにちは、${name}さん`);

■テンプレートリテラルの書き方
${定数}
文字列全体をバッククォート（`）で囲む必要がある。
※シングルクォーテーションではないので注意！！

■条件分岐
・if文の書き方
if(条件式){
	処理
}
※セミコロン(;)は不要

■条件式の出力
const number = 12;
console.log(number > 10);
→「ture」と出力される。

■大小を比べる演算子


■比較演算子
a === b ←aとbが等しい
a !== b ←aとbが異なるとき

■条件が成り立たない場合の処理
if (条件式) {
	条件が[ture]の時の処理
} else {
	条件が[fale]の時の処理
}

■条件を追加する(else if)
if (条件式１) {
	条件式１が[ture]の時の処理
} else if (条件式2) {
	条件式１が[false],(条件式2)が[ture]時の処理
else {
	全ての条件が[fale]の時の処理
}

■swich文
ある値によって処理を分岐する場合にswich文を用いることができる。
swich (条件の値) {
case 値１:
	「条件の値」が「値１」と等しい時の処理
	break;
case 値２:
	「条件の値」が「値２」と等しい時の処理
	break;
default:
	「条件の値」が「値２」と等しい時の処理
	break;
}

※breakを記述しないと合致したcase以降の処理が実行されてしまう。







